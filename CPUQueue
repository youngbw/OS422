
struct job {
	int job_id;
	int nr_phases;
	int current_phase;
	// Phase types: 0 = CPU phase; 1 = IO phase
	int phasetypes[nr_phases];
	int phasedurations[nr_phases];
	int is_completed = 0;
};

struct job *cpu[8];
struct job *io[4];
struct job *fin[4];

CPU_Queue;
IO_Queue;
Fin_Queue;

void cpuWorkMethod() {
	if (job->phasedurations[job->current_phase] == 0) {
		passJob();
		getJob();
	}
}

void passJob() {
	job->current_phase += 1;
	if(nr_phases - current_phase <= 1) {
		Fin_Queue.enqueue(job);
	} else {
		if(job->phasetypes[job->current_phase]) {
			IO_Queue.enqueue(job);
		} else {
			CPU_Queue.enqueue(job);
		}
	}
}

*job getJob(int type) {
	if(type == 0) {
		return CPU_Queue.dequeue();
	} else if (type == 1) {
		return IO_Queue.dequeue();
	} else {
		return Fin_Queue.dequeue();
	}
}

void ioWorkMethod() {
	if (job->phasedurations[job->current_phase] == 0) {
		passJob();
		getJob();
	}
}

void finWorkMethod() {
	getJob();
	// delete job
}

int main() {
	int i;
	pthread_t threads[16];
	int finished = 0;
	for(i = 0; i < 8;) {
		pthread_create(&threads[i], NULL, cpuWorkMethod, NULL);
		if (i < 4) {
			pthread_create(&threads[i+8], NULL, ioWorkMethod, NULL);
			pthread_create(&threads[i+12], NULL, finWorkMethod, NULL);
		}
	}

	while (finished == 0) {
		for(i = 0; i < 8;) {

			if (i < 4) {
			}
		}


		if (CPU_Queue.isEmpty() &&
			IO_Queue.isEmpty() &&
			Fin_Queue.isEmpty()) {
			finished = 1;
		}
	}

	return 0;
}
